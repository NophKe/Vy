### current bpython session - make changes and save to reevaluate session.
### lines beginning with ### will be ignored.
### To return to bpython without reevaluating make no changes to this file
### or save an empty file.
from vy.filetypes.basefile import BaseFile
buffer = BaseFile(path='/etc/hosts')
buffer.string
# OUT: '\n'
buffer.string = '127.0.0.1      localhost'
buffer.string           # allways correct line endings
# OUT: '127.0.0.1      localhost\n'
len(buffer)             # len as an opaque number
# OUT: 24
buffer[0:(len(buffer)-1)] # all but last character.
# OUT: '127.0.0.1      localhos'
buffer[':$']            # note that we pass a string !!!
# OUT: '127.0.0.1      localhost'
buffer.splited_lines    # represented as a list of lines
# OUT: ['127.0.0.1      localhost\n']
buffer.move_cursor('$') # go to end of line
buffer.insert_newline()
buffer.insert('# newlines should \n# be correctly handled')
buffer.splited_lines    # and properties updated  
# OUT: ['127.0.0.1      localhost\n', '# newlines should \n', '# be correctly handled\n']

buffer.move_cursor('gg') # classical vi movements understood
buffer.cursor_lin_col
# OUT: (0, 1)
buffer.current_line
# OUT: '127.0.0.1      localhost\n'
buffer.current_line = buffer.current_line.upper()
buffer.current_line
# OUT: '127.0.0.1      LOCALHOST\n'
buffer.string
# OUT: '127.0.0.1      LOCALHOST\n# newlines should \n# be correctly handled\n'
buffer.cursor
# OUT: 0
del buffer[':$']
buffer.string
# OUT: '\n# newlines should \n# be correctly handled\n'
buffer.cursor
# OUT: 0
buffer.suppr()
buffer.getvalue()
# OUT: '# newlines should \n# be correctly handled\n'
buffer.read(-1) # can be used as a file-like object
# OUT: '# newlines should \n# be correctly handled\n'
buffer.tell()   # the cursor
# OUT: 42
buffer.write('0.0.0.0\t\twww.google.fr')
buffer[buffer.cursor:]
# OUT: '\n'
buffer.number_of_lin
# OUT: 3
buffer.string
# OUT: '# newlines should \n# be correctly handled\n0.0.0.0\t\twww.google.fr\n'
buffer.set_undo_point()
buffer.current_line = ' nonsense '
# OUT: Traceback (most recent call last):
# OUT:   File "<input>", line 1, in <module>
# OUT:     buffer.current_line = ' nonsense '
# OUT:   File "/usr/lib/python3.10/site-packages/vy/filetypes/basefile.py", line 79, in current_line
# OUT:     assert value and value.endswith('\n'), f'{value = }'
# OUT: AssertionError: value = ' nonsense '
buffer.current_line = ' nonsense \n'
buffer.string
# OUT: '# newlines should \n# be correctly handled\n nonsense \n'
buffer.string = buffer['#.:#+2']  # buffer take value of slice #. current line to #+2 lines later
buffer.string
# OUT: ' nonsense \n'
### 
