### current bpython session - make changes and save to reevaluate session.
### lines beginning with ### will be ignored.
### To return to bpython without reevaluating make no changes to this file
### or save an empty file.
x = DummyLine()
x.insert('FOO')
x.string
# OUT: 'FOO'
x.cursor = 0
x.insert('\n12345')
x.backspace()
x.string
# OUT: '\n1234FOO'
'\n1234'
# OUT: '\n1234'
x.cursor = 0
x.suppr()
x.string
# OUT: '1234FOO'

file = BaseFile(init_text='Hello World\n\t42\t\nno End-of-file?', cursor=0)
file.move_cursor('w')           # moves to next word ( regex \b )
assert file[:11] == file[':$']  # vim style buffer slice ( regex ^.*$ ) 

with file:
    assert file.number_of_lin == len(file.splited_lines) == len(file.lines_offsets)
file.splited_lines
# OUT:   File [32m"<bpython-input-166>"[39m, line [35m[1m3[0m[39m
# OUT:     file.splited_lines
# OUT:     ^^^^
# OUT: [31m[1mSyntaxError[0m[39m: [36minvalid syntax[39m
file.current_line = '' # what if I forget line ending
# OUT: Traceback (most recent call last):
# OUT:   File [32m"<input>"[39m, line [35m[1m1[0m[39m, in [36m<module>[39m
# OUT:     file.current_line = '' # what if I forget line ending
# OUT:   File [32m"filetypes/basefile.py"[39m, line [35m[1m544[0m[39m, in [36mcurrent_line[39m
# OUT:     assert value and value.endswith('\n'), f'{value = }'
# OUT: [31m[1mAssertionError[0m[39m: [36mvalue = ''[39m
file.current_line = '\n' # what if I forget line ending
file.cursor_lin_col
# OUT: (0, 7)
# Now lets modify it.
file.cursor = file.lines_offsets[file.number_of_lin - 1]
file.insert('junk')
# OUT: Traceback (most recent call last):
# OUT:   File [32m"<input>"[39m, line [35m[1m1[0m[39m, in [36m<module>[39m
# OUT:     file.insert('junk')
# OUT:   File [32m"filetypes/basefile.py"[39m, line [35m[1m423[0m[39m, in [36minsert[39m
# OUT:     self.current_line = f'{string[:cur]}{text}{string[cur:]}'
# OUT:   File [32m"filetypes/basefile.py"[39m, line [35m[1m544[0m[39m, in [36mcurrent_line[39m
# OUT:     assert value and value.endswith('\n'), f'{value = }'
# OUT: [31m[1mAssertionError[0m[39m: [36mvalue = '\njunk'[39m
# TODO carrefully review next results
file.current_line
# OUT: '\n'
file.splited_lines
# OUT: ['\n', '\t42\t\n', 'no End-of-file?\n']
file.cursor_lin_col
# OUT: (0, 11)
file.insert_newline()
file.insert('\n')
file.backspace()
file.suppr()
file.suppr()
file.write('ä¸­å›½')
# OUT: 2
file.seek(0)
file.write('over_write')
# OUT: 10
file.read()
# OUT: Traceback (most recent call last):
# OUT:   File [32m"<input>"[39m, line [35m[1m1[0m[39m, in [36m<module>[39m
# OUT:     file.read()
# OUT:   File [32m"filetypes/basefile.py"[39m, line [35m[1m895[0m[39m, in [36mread[39m
# OUT:     self.cursor = len(self.string)
# OUT:   File [32m"filetypes/basefile.py"[39m, line [35m[1m575[0m[39m, in [36mcursor[39m
# OUT:     assert self._lenght >= value, f'{self._lenght =} {value =} {(self) = }'
# OUT: [31m[1mAssertionError[0m[39m: [36mself._lenght =20 value =21 (self) = writeable buffer: undound to file system[39m
file[0:10]
# OUT: 'over_write'
file[0:8] = 'too big to fit in there'
file[0] = 'never '
file[:29] 
# OUT: 'never oo big to fit in theret'

x = BaseFile()
len('å›½')
# OUT: 1
x.string = "0____5\n___"
x.cursor = 0
x.find_end_of_line()
# OUT: 6
6
# OUT: 6
x.find_end_of_line()
# OUT: 6
6
# OUT: 6
x.cursor = 7
x.find_end_of_line()
# OUT: 10
x.cursor = 0
x.string = "foo,bar;baz.foo,bar/baz!foo%bar"
# breaks      ||  ||  ||  ||  ||  ||  ||  |             
# breaks      2|  6| 10| 14| 18| 22| 26| 30             
# breaks       3   7  11  15  19  23  27                
for expected in [2,3,6,7,10,11,14,15,18,19,22,23,26,27,30]:
...     assert _t(x, x.find_end_of_word()) == expected, f' *** {expected = } *** { x.cursor = }'
# OUT:   File [32m"<bpython-input-207>"[39m, line [35m[1m2[0m[39m
# OUT:     ...     assert _t(x, x.find_end_of_word()) == expected, f' *** {expected = } *** { x.cursor = }'
# OUT:     ^^^
# OUT: [31m[1mIndentationError[0m[39m: [36mexpected an indented block after 'for' statement on line 1[39m
x.string = "0____5\n_"
x.cursor = 0
x.find_normal_l()
# OUT: 1
x.cursor = 5
x.find_normal_l()
# OUT: 5
x.cursor = 7
_t(x, x.find_normal_l())
# OUT: Traceback (most recent call last):
# OUT:   File [32m"<input>"[39m, line [35m[1m1[0m[39m, in [36m<module>[39m
# OUT:     _t(x, x.find_normal_l())
# OUT: [31m[1mNameError[0m[39m: [36mname '_t' is not defined[39m
x.string = "0____5\n___"
x.cursor = 0
x.find_normal_h()
# OUT: 0
x.cursor = 7
x.find_normal_h()
# OUT: 7



### 
